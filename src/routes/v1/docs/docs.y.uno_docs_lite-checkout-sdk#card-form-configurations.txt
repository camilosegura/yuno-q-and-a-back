Lite SDK (Payment)                                                                                                                                       Jump to ContentHomeGuidesAPI ReferenceDashboardStatus Pagev1.0v2.0Book a DemoBook a Demov1.0HomeGuidesAPI ReferenceDashboardStatus PageSearchGet Started with YUNOOverviewSet Up Your AccountCreate Your First PaymentHow yuno worksWhat is Yuno?Basic ConceptsCustomersSessionsPaymentsTransactionsTokensPayment methodsWebhooksFraud prevention3DSPostman GuideBUILD YOUR INTEGRATIONChoose The Right Integration For YouStep by Step Integration ProcessFull SDKLite SDK (Payment)Lite SDK (Enrollment)Secure FieldsDirect FlowYour Payment Operative SystemEnvironmentsDashboard FunctionalitiesHomeDevelopers (Credentials)ConnectionsCheckout BuilderRoutingInsightsPaymentsExport DataAccounts ManagementTeams and RolesReconciliationsReportsPayment LinksSecurityUSE CASESCreate PaymentsRefund PaymentsCancel PaymentsCapture PaymentsBuild ReportsSDKsYuno SDKsWeb SDK IntegrationsFull SDKLite SDK (Payment)Lite SDK (Enrollment)Secure Fields (Payment)Secure Fields (Enrollment)LoaderPayment StatusSDK Customizations3DS Setup SDKDemo AppAndroid SDK IntegrationsRequirementsFull SDKLite SDK (Payment)Lite SDK (Enrollment)LoaderSDK CustomizationsiOS SDK IntegrationsRequirementsFull SDKLite SDK (Payment)Lite SDK (Enrollment)LoaderSDK CustomizationsPLUGINSVTEXRegistering Yuno affiliationConfiguring payment conditionsAdditional servicesWebhooksConfigure WebhooksExamplesEnroll Payment MethodsToken Migration ProcessBatch FileVia API3D SecureDirect WorkflowPCI CompliancePayoutsConnections by providerAcquirersAcquirers Advanced InformationAdyenBACBBVA OpenpayCieloCredibancoDatafastFirst Atlantic Commerce (FAC)FiservGetnetIzipayKlapMedianetNiubizPagSeguroProsaRedeRedebanStoneTransbankYuno Testing GatewayWorldpayFraud SolutionsClearSaleCyberSourceSignifydRiskifiedProcessorsaCuotazAddiAdyenArcusBradescoBraintreeBBVA OpenpayCredixDaviPlatadLocalEbanxKushkiMercado PagoNuPayNuveiPaymentezPayPalPayUPayvalidaPayzenPlace to PaySafetyPaySTPStripeT1PagosTransfeeraUnlimintWibondWompiWorldlineWorldpayPayment MethodsaCuotaz - BNPLAddi - BNPLAdyen - PIXAdyen - CardsArcus - CashBAC - CardsBradesco - PIXBraintree - CardsCielo - CardsCredix - CardsDaviPlata - BankTransferdLocal - CardsdLocal - Checkout RedirectdLocal - CODIdLocal - EfectydLocal - KhipudLocal - OXXOdLocal - Pago EfectivodLocal - PSEdLocal - SPEIdLocal - Tarjeta ClaveEbanx - CardsFAC - CardsGetnet - CardsGetnet - PIXKlap - CardsKushki - CardsMercado Pago - APIMercado Pago - Checkout ProMercado Pago - PSEMercado Pago - Wallet ConnectNupay - PIXNupay - WalletNuvei - OXXO PayNuvei - SPEIPaymentez - CardsPaymentez - DaviplataPaymentez - LinkToPayPaymentez - NequiPaymentez - PaycashPaymentez - PSEPaymentez - SencillitoPaymentez - WebpayPayPal - Smart ButtonPayU - CardsPayvalida - Payment LinkPayzen - PSEPlace to Pay - CardsRede - CardsSafetyPay - Payment LinkStone - CardsSTP - SPEISTP - CoDiStripe - CardsT1Pagos - CardsTransbank - CardsTransbank Mall - CardsTransbank - WebpayTransbank Mall - WebPayTransfeera - PIXUnlimint - CardsUnlimint - CheckoutWibond - BNPLWompi - BancolombiaWompi - CardsWompi - NequiWompi - PSEWompi - TokenBoxWorldpay - CardsWorldline - CardsWalletsApple PayGoogle PayConnections by CountryCoverageAfricaAlgeriaAngolaBeninBotswanaBurkina FasoBurundiCameroonCape VerdeCentral African RepublicChadComorosDemocratic Republic of the CongoDjiboutiEgyptEquatorial GuineaEritreaEthiopiaFrench Southern TerritoriesGabon RepublicGambiaGhanaGuinea-BissauGuineaHeard Island and McDonald IslandsIvory CoastKenyaLesothoLiberiaLibyanMadagascarMalawiMaliMauritaniaMauritiusMayotteMoroccoMozambiqueNamibiaNigerNigeriaRepublic of the CongoReunionRwandaSaint HelenaSao Tome and PrincipeSenegalSeychellesSierra LeoneSomaliaSouth AfricaSouth SudanSudanSwazilandTanzaniaTogoTunisiaUgandaWestern SaharaZambiaZimbabweAmericaAnguillaAntigua and BarbudaArgentinaArubaBahamasBarbadosBelizeBermudaBoliviaBrazilBritish Virgin IslandsCanadaCayman IslandsChileColombiaCosta RicaCubaCuracaoDominicaDominican RepublicEcuadorEl SalvadorFalkland Islands (Malvinas)French GuianaGrenadaGuadeloupeGuatemalaGuyanaHaitiHondurasJamaicaMartiniqueMexicoMontserratNicaraguaPanamaParaguayPeruPuerto RicoSaint Kitts and NevisSaint LuciaSaint MaartenSaint Pierre and MiquelonSaint Vincent and the GrenadinesSurinameTrinidad and TobagoTurks and CaicosUnited States of AmericaUruguayVenezuelaAsia PacificAfghanistanArmeniaAustraliaAzerbaijan RepublicBahrainBangladeshBhutanBruneiCambodiaChinaChristmas IslandCocos (Keeling) IslandsCook IslandsFijiFrench PolynesiaGuamHong KongIndiaIndonesiaIranIraqIsraelJapanJordanKazakhstanKiribatiKuwaitKyrgyztanLaosLebanonMacaoMalaysiaMaldivesMarshall IslandsMicronesiaMongoliaMyanmarNauruNepalNew CaledoniaNew ZealandNiueNorfolk IslandNorthern Mariana IslandsOmanPakistanPalauPalestinian TerritoryPapua New GuineaPhilippinesPitcairn IslandsQatarSamoaSaudi ArabiaSingaporeSolomon IslandsSouth KoreaSri LankaSyriaTaiwanTajikistanThailandTimor-LesteTokelauTongaTurkmenistanTuvaluUnited Arab EmiratesUzbekistanVanuatuVietnamWallis and FutunaYemenEurope√Öland IslandsAlbaniaAndorraAustriaBelarusBelgiumBosnia and HezergovinaBulgariaCroatiaCyprusCzechiaDenmarkEstoniaFaroe IslandsFinlandFranceGeorgiaGermanyGibraltarGreeceGreenlandGuernseyHungaryIcelandIrelandIsleItalyJerseyKosovoLatviaLiechtensteinLithuaniaLuxembourgMaltaMoldovaMonacoMontenegroNetherlandsNorth MacedoniaNorwayPolandPortugalRomaniaRussiaSan MarinoSerbiaSlovakiaSloveniaSpainSvalbard and Jan MayenSwedenSwitzerlandTurkeyUkraineUnited KingdomVatican CityLite SDK (Payment)Suggest EditsBelow, we outline the step-by-step process to enable the lite SDK functionalities in your system:  Step 1: Include the library in your project. Ensure the Yuno SDK file is included in your webpage before closing the  tag. Refer to the example below: HTML<script src="https://sdk-web.y.uno/v1/static/js/main.min.js"></script>  Step 2: Initialize SDK with the public key In your JavaScript application, create an instance of the Yuno class by providing a valid PUBLIC_API_KEY. Check the Get your API credentials guide.  Like the example below, use the initialized class that is attributed to the yunoconstant. JavaScriptconst yuno = Yuno.initialize(PUBLIC_API_KEY)  Step 3: Start the checkout process You will start the checkout process. To do it, use the yuno.startCheckout function and provide the necessary parameters.  The following table lists all required parameters and their descriptions. For optional parameters go to Complementary Features. ParameterDescriptioncheckoutSessionRefers to the current payment's checkout session.Example: '438413b7-4921-41e4-b8f3-28a5a0141638'elementSelectorSpecifies the HTML element where you want to mount the Yuno SDK. The SDK will be rendered within this element.countryCodeThis parameter determines the country for which the payment process is being configured. It should be set to one of the following country codes: CO, BR, CL, PE, EC, UR, or MX.languageDefines the language to be used in the payment forms. You can set it to one of the available language options: es (Spanish), en (English), or pt (Portuguese).onLoadingRequired to receive notifications about server calls or loading events during the payment process.  JavaScriptyuno.startCheckout({   checkoutSession: '438413b7-4921-41e4-b8f3-28a5a0141638',   elementSelector: '#root',    countryCode: 'CO',   language: 'es',   onLoading: (args) => {     console.log(args);   }   async yunoCreatePayment(oneTimeToken) {     await createPayment({ oneTimeToken, checkoutSession })     yuno.continuePayment()   }, })  Step 4: Mount the SDK Display the payment methods by using the yuno.mountCheckoutLite() function by selecting an HTML element and using a valid CSS selector (#, ., [data-*]). JavaScriptyuno.mountCheckoutLite({   /**    * can be one of 'BANCOLOMBIA_TRANSFER' | 'PIX' | 'ADDI' | 'NU_PAY' | 'MERCADO_PAGO_CHECKOUT_PRO | CARD    */   paymentMethodType: PAYMENT_METHOD_TYPE,   /**    * Vaulted token related to payment method type.    * Only if you already have it    * @optional     */   vaultedToken: VAULTED_TOKEN, })  After mounting the SDK, the selected payment method flow will start automatically. Step 5: Initiate the payment process After the user has selected a payment method remember to call yuno.startPayment() to initiate the payment flow. Below you will find an example where yuno.startPayment() is called when the user clicks on button-pay: JavaScriptconst PayButton = document.querySelector('#button-pay')  PayButton.addEventListener('click', () => {   yuno.startPayment() })  Step 6: Get the OTT (One Time Token) Once the customer fills out the requested data in Yuno's payment forms, the SDK provides the OTT. The configuration function yunoCreatePayment(oneTimeToken) is then triggered with the OTT (One Time Token). JavaScriptyunoCreatePayment(oneTimeToken)  You can also use tokenWithInformation to receive any additional info given by the customer in the checkout such as installments or document type/number. JavaScriptyunoCreatePayment(oneTimeToken, tokenWithInformation)      Important   				The merchant is responsible for handling the loader. Yuno offers an option to use our loader; however, the merchant can use their own loader and must make the corresponding configurations.              Step 7: Create the Payment Once you have completed the steps described before, you will be able to create a payment. The back-to-back payment creation must be carried out using the Create Payment endpoint. The merchant should call their backend to create the payment within Yuno, using the OTT (One Time Token) and the checkout session.   Continue: We recommend integrating the continuePayment method of the SDK after the payment is created because certain asynchronous payment methods require additional action from the customer to complete it. The API will inform you of this scenario via the sdk_action_required field of the response, which will be returned as true. The yuno.continuePayment() function will display the additional screens to the customers, where they can carry out the necessary actions to complete the payment. Otherwise, this step is not necessary.  After this step, you can complete the end-to-end integration by referencing back to the Step by Step integration of the Lite SDK Complementary Features In addition to the code examples provided, you can access the Demo App for a complete implementation of Yuno SDKs or go directly to the HTML and JavaScript checkout demos available on GitHub. Yuno Web SDK provides additional services and configurations you can use to improve customers' experience:  Form loader Render mode  Card form configurations   Save Card for future payments Render mode Text payment form buttons External Payment Buttons Persist credit card form to retry payments   Bank Issuer List SDK Customizations: Change the SDK appearance to match your brand. Payment Status: Update the user about the payment process. 3DS Setup SDK: Integrate 3DS into your payment flow.     Loader Control the use of the loader.  ParameterDescriptionkeepLoaderYou can choose whether to hide or show the Yuno loading/spinner page. Enabling this option ensures that the loading component remains displayed until either the hideLoader() or continuePayment() function is called. The default value is true. JavaScriptyuno.startCheckout({   showLoading: true, })    Issuer¬¥s form (bank list)   ParameterDescriptionissuersFormEnableThrough this parameter, you can configure the SDK to enable the issuer's form (bank list) JavaScriptyuno.startCheckout({   issuersFormEnable: true, })    Mode of form rendering   ParameterDescriptionrenderModeDetermine the mode in which the payment forms will be displayed. - type: can be one of modal or element. - elementSelector: Element where the form will be rendered * Only needed if type is element. JavaScriptyuno.startCheckout({   renderMode: {     type: 'modal',     elementSelector: '#form-element',   }, })    Card form configurations   ParameterDescriptioncardDefine specific settings for the credit card form - type: step o extends - styles: You can edit card form styles. Only you should write css, then it will be injected into the iframe. - cardSaveEnable: Show checkbox for save/enroll card. Default value is false. - texts: Custom texts in Card forms buttons. JavaScriptyuno.startCheckout({   card: {     type: "extends",     styles: '',     cardSaveEnable: false,     texts: {}   }, })  Save card for future payments In addition, you can display a checkbox for save or enroll cards using cardSaveEnable: true. Below you can find examples of the checkbox for both card form renders.    Rendering modes Below you find screenshots presenting the difference between the:   Render modes modal and elements for the payment method list.  Render modes step and extends for the credit card form.         Element      Modal     You also can choose one of the render options for the card form, step and extends:        Extends      Step    Text payment form buttons ParameterDescriptiontextsProvide custom text for payment form buttons to match your application's language or branding. JavaScriptyuno.startCheckout({   texts: {     customerForm?: {       submitButton?: string;     }     paymentOtp?: {       sendOtpButton?: string;     }   } })  External Payment Buttons ParameterDescriptionexternalPaymentButtonsConfigure external payment buttons, such as  Paypal, Google Pay, or Apple Pay. JavaScriptyuno.startCheckout({   externalPaymentButtons: {     paypal: {       elementSelector: '#paypal',     },   }, })  Persist credit card form to retry payments In case a a transaction is rejected, you can persist the credit card form to retry a payment after the customer has entered the credit card details. In order to do that, you will need to:   Add the following parameter while initializing the SDK to persist the credit card form after the one time use token is created:  JavaScriptyuno.startCheckout({   automaticallyUnmount: false, })   In case the transaction is rejected, you will need to:   Execute the method yuno.notifyError() to delete the previously entered CVV for the first transaction.  Create a new checkout session and update the SDK with the new one by executing yuno.updateCheckoutSession(checkoutsession)   Continue with the new checkout and one time use token with the regular payment flow. Updated 19 days ago Table of Contents   Step 1: Include the library in your project. Step 2: Initialize SDK with the public key Step 3: Start the checkout process Step 4: Mount the SDK Step 5: Initiate the payment process Step 6: Get the OTT (One Time Token) Step 7: Create the Payment    Complementary Features                                                  