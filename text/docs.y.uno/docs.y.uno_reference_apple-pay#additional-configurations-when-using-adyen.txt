Apple Pay








































































































































Jump to ContentHomeGuidesAPI ReferenceDashboardStatus Pagev1.0v2.0Book a DemoBook a Demov1.0HomeGuidesAPI ReferenceDashboardStatus PageSearchJUMP TOOverviewIntroductionAuthenticationHTTP Response CodesReferenceAirline informationCountry referenceECI indicators listIndustry categoryItems categoryPayment typePurposes listTransaction categoryCustomersManage CustomersThe Customer ObjectCreate CustomerpostRetrieve CustomergetRetrieve Customer by External IDgetUpdate CustomerpatchEnrollmentStatusCustomer SessionsThe Customer Session ObjectCreate Customer SessionpostPayment Methods (Checkout)The Payment Method ObjectRetrieve Payment Methods To EnrollgetEnroll Payment MethodpostRetrieve Payment Method By IDgetRetrieve Payment Method by Customer SessiongetUnenroll Payment MethodpostPayment Methods (Direct Workflow)The Payment Method ObjectRetrieve Payment Methods To EnrollgetEnroll Payment MethodpostRetrieve Enrolled Payment MethodsgetRetrieve Enrolled Payment Method by IdgetUnenroll Payment MethodpostCheckoutCheckout SessionsThe Checkout Session ObjectCreate Checkout SessionpostRetrieve Payment Methods for CheckoutgetPaymentsStatus and Response CodesPaymentsTransactionsManage PaymentsThe Payment ObjectCreate PaymentpostRetrieve Payment by IDgetRetrieve Payment by Merchant Order IDgetRefund PaymentpostCancel PaymentpostAuthorize PaymentpostCapture Authorizationpost3DS (Direct Workflow)SetuppostPayments with 3DS SplitCreate PaymentpostComplete PaymentpostPayments ExamplesBank TransferBNPLCardsPayment LinkTicketWalletPayment LinksStatusManage Payment LinksThe Payment Link ObjectCreate Payment LinkpostRetrieve Payment LinkgetCancel Payment LinkpostPAYOUTSStatusManage PayoutsThe Payout ObjectCreate PayoutpostRetrieve Payout by IDgetRetrieve Payout by Merchant ReferencegetRelease PayoutpostCancel PayoutpostReportsStatusManage ReportsThe Reports ObjectReports FieldsCreate a ReportpostRetrieve a ReportgetDownload a ReportgetList All ReportsgetJUMP TOOverviewIntroductionAuthenticationHTTP Response CodesReferenceAirline informationCountry referenceECI indicators listIndustry categoryItems categoryPayment typePurposes listTransaction categoryCustomersManage CustomersThe Customer ObjectCreate CustomerpostRetrieve CustomergetRetrieve Customer by External IDgetUpdate CustomerpatchEnrollmentStatusCustomer SessionsThe Customer Session ObjectCreate Customer SessionpostPayment Methods (Checkout)The Payment Method ObjectRetrieve Payment Methods To EnrollgetEnroll Payment MethodpostRetrieve Payment Method By IDgetRetrieve Payment Method by Customer SessiongetUnenroll Payment MethodpostPayment Methods (Direct Workflow)The Payment Method ObjectRetrieve Payment Methods To EnrollgetEnroll Payment MethodpostRetrieve Enrolled Payment MethodsgetRetrieve Enrolled Payment Method by IdgetUnenroll Payment MethodpostCheckoutCheckout SessionsThe Checkout Session ObjectCreate Checkout SessionpostRetrieve Payment Methods for CheckoutgetPaymentsStatus and Response CodesPaymentsTransactionsManage PaymentsThe Payment ObjectCreate PaymentpostRetrieve Payment by IDgetRetrieve Payment by Merchant Order IDgetRefund PaymentpostCancel PaymentpostAuthorize PaymentpostCapture Authorizationpost3DS (Direct Workflow)SetuppostPayments with 3DS SplitCreate PaymentpostComplete PaymentpostPayments ExamplesBank TransferBNPLCardsPayment LinkTicketWalletPayment LinksStatusManage Payment LinksThe Payment Link ObjectCreate Payment LinkpostRetrieve Payment LinkgetCancel Payment LinkpostPAYOUTSStatusManage PayoutsThe Payout ObjectCreate PayoutpostRetrieve Payout by IDgetRetrieve Payout by Merchant ReferencegetRelease PayoutpostCancel PayoutpostReportsStatusManage ReportsThe Reports ObjectReports FieldsCreate a ReportpostRetrieve a ReportgetDownload a ReportgetList All ReportsgetApple PayApple Pay is a cutting-edge mobile payment solution designed exclusively for iOS devices. With its proprietary technologies, Apple Pay offers a seamless, end-to-end payment experience that differentiates it from traditional payment methods. Before integrating with Yuno, it's crucial to grasp the workflow of this innovative system.
Yuno presents an effortless way to incorporate Apple Pay as a payment method in your app. You have two integration options:

Utilize our user-friendly SDK;
Directly integrate with our API.

Yuno streamlines the process of accepting Apple Pay payments and provides the flexibility to route payments to any payment service provider. By incorporating Apple Pay, you can elevate the customer experience and boost conversions within your app.
Providers
To incorporate Apple Pay into your system using Yuno, first, select one provider supporting this payment method. On Yuno, you have the following option:












Adyen







Cielo





You must have credentials to connect to the selected provider using Yuno dashboard before integrating Apple Pay.
Integration
You need to cover some steps to integrate Apple Pay into your system using Yuno.

First, create a Merchant ID in your Apple Developer account and generate a merchant identifier. The merchant identifier serves as your unique digital identity of a merchant eligible to receive payments through the Apple Pay platform. If you use Adyen, refer to the necessary additional configuration.
Create a payment processing certificate following the Apple documentation.
Within the Yuno dashboard, select the Connections tab. Find the provider you choose and click Connect. Fulfill the side panel fields with your credentials and the previously created Merchant ID. Below you will find examples of connecting panels for Adyen and Cielo.



Create a route in Yuno's dashboard using the provider you have connected to. Access the Configure dynamic routing guide page for further information on creating routes.

Additional configurations when using Adyen
If you are using Adyen as your provider, you will need to consider some additional points when integrating Apple Pay. 
First, in step 1, described previously, you will have different merchant identifiers for test transactions and live transaction

Live merchant identifier: Your merchant identifier must include the prefix merchant.com.adyen. For example, merchant.com.adyen.merchantAccount.
Test merchant identifier: Create a merchant identifier with .test at the end for test transactions. For example, merchant.com.adyen.merchantAccount.test.,

In addition, in step 2, you will need to create the payment processing certificate using the CSR (Certificate Signing Request) provided by Adyen.
Enable and test Apple Pay with Yuno
After performing the integration on Yuno, you can enable Apple Pay with Yuno and perform integration tests using the following steps:

First, integrate Yuno's SDK into your app to ensure a smooth connection between your application and Yuno's platform.
Enable Apple Pay within your app using Xcode:

Add the Apple Pay capability to your project in Xcode.
Select the Merchant ID that you previously created. It will automatically appear if you are logged in to your developer account.





Once you have successfully integrated Yuno's SDK and enabled Apple Pay in your project, it's time to conduct tests using Apple's test credit cards.

Open the Wallet app on your iOS device.
Add one of the test cards available on the Apple Developer website's sandbox testing cards page.
Navigate through the payment flow just as you would with any other payment method. You will see a Transaction approved message at the end




By conducting this test, you can ensure that Apple Pay is seamlessly integrated into your app and functioning perfectly.Table of Contents

Providers


Integration

Additional configurations when using Adyen



Enable and test Apple Pay with Yuno



















































